# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1THu8xVzX2TLCzVzw9fsB90MpyOisX-jW
"""

# Juan: Se define una funcion para pedirle a usuario una funcion

def solicitar_conjunto(ctj):

    # Juan:Se pide al usuario la cantidad de elementos (cardinalidad) del conjunto

    print()

    crd = int(input(f"Ingrese la cardinalidad del conjunto {ctj}: "))

    # Juan: Se crea un conjunto vacio para almacenar los elementos

    cj = set()

    # Juan: Se empieza a pedir los elementos del conjunto

    print()

    print(f"Ingrese los elementos del conjunto {ctj}:")

    # Juan: Cuando el conjunto tiene menos que la cardinalidad, entonces...

    while len(cj) < crd:

        # Juan: Se solicita un elemento al usuario

        print()

        elm = input(f"Elemento {len(cj)+1}: ")

        # Juan: Se agrega el elemento al conjunto sin repetir
        cj.add(elm)

    # Juan: Se retorna el conjunt

    return cj

# Juan: Funcion principal donde ocurrira toda la logica

def main():

    print("-Conjunto Universal U-")

    u = solicitar_conjunto("U")

    print()

    print("-Conjunto A-")

    a = solicitar_conjunto("A")

    # Juan: Se usa issubset() para poder verificar si A es subconjunto de B

    if a.issubset(u):

        print()

        print("A es subconjunto de U")

        d1 = u - a

        r1 = d1.symmetric_difference(a)

        print(f"\n1. (U - A) Δ A = {r1}")

        i1 = u.intersection(a)

        r2 = i1 - a

        print(f"2. (U ∩ A) - A = {r2}")

        u1 = u.union(a)

        r3 = u1.intersection(a)

        print(f"3. (U ∪ A) ∩ A = {r3}")

    # Juan: Si A no es subconjunto de U, se muestra mensaje de error

    else:

        print()

        print("A no es subconjunto de U. No se pueden realizar las operaciones")

if __name__ == "__main__":

    main()