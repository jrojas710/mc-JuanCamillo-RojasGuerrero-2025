{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOW6mNOBWTKmAsvz6uqy0qE"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Vtpn47MZ7yY",
        "outputId": "6b50e973-e6da-405c-f9c4-e1b53e05a4e1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-Conjunto Universal U-\n",
            "Ingrese la cardinalidad del conjunto U: 5\n",
            "\n",
            "Ingrese los elementos del conjunto U:\n",
            "\n",
            "Elemento 1: 1\n",
            "\n",
            "Elemento 2: 2\n",
            "\n",
            "Elemento 3: 3\n",
            "\n",
            "Elemento 4: 4\n",
            "\n",
            "Elemento 5: 5\n",
            "\n",
            "-Conjunto A-\n",
            "Ingrese la cardinalidad del conjunto A: 2\n",
            "\n",
            "Ingrese los elementos del conjunto A:\n",
            "\n",
            "Elemento 1: 2\n",
            "\n",
            "Elemento 2: 3\n",
            "\n",
            "A es subconjunto de U\n",
            "\n",
            "1. (U - A) Δ A = {'1', '4', '3', '2', '5'}\n",
            "2. (U ∩ A) - A = set()\n",
            "3. (U ∪ A) ∩ A = {'3', '2'}\n"
          ]
        }
      ],
      "source": [
        "# Juan: Se define una funcion para pedirle a usuario una funcion\n",
        "\n",
        "def solicitar_conjunto(ctj):\n",
        "\n",
        "    # Juan:Se pide al usuario la cantidad de elementos (cardinalidad) del conjunto\n",
        "\n",
        "    print()\n",
        "\n",
        "    crd = int(input(f\"Ingrese la cardinalidad del conjunto {ctj}: \"))\n",
        "\n",
        "    # Juan: Se crea un conjunto vacio para almacenar los elementos\n",
        "\n",
        "    cj = set()\n",
        "\n",
        "    # Juan: Se empieza a pedir los elementos del conjunto\n",
        "\n",
        "    print()\n",
        "\n",
        "    print(f\"Ingrese los elementos del conjunto {ctj}:\")\n",
        "\n",
        "    # Juan: Cuando el conjunto tiene menos que la cardinalidad, entonces...\n",
        "\n",
        "    while len(cj) < crd:\n",
        "\n",
        "        # Juan: Se solicita un elemento al usuario\n",
        "\n",
        "        print()\n",
        "\n",
        "        elm = input(f\"Elemento {len(cj)+1}: \")\n",
        "\n",
        "        # Juan: Se agrega el elemento al conjunto sin repetir\n",
        "        cj.add(elm)\n",
        "\n",
        "    # Juan: Se retorna el conjunt\n",
        "\n",
        "    return cj\n",
        "\n",
        "# Juan: Funcion principal donde ocurrira toda la logica\n",
        "\n",
        "def main():\n",
        "\n",
        "    print(\"-Conjunto Universal U-\")\n",
        "\n",
        "    u = solicitar_conjunto(\"U\")\n",
        "\n",
        "    print()\n",
        "\n",
        "    print(\"-Conjunto A-\")\n",
        "\n",
        "    a = solicitar_conjunto(\"A\")\n",
        "\n",
        "    # Juan: Se usa issubset() para poder verificar si A es subconjunto de B\n",
        "\n",
        "    if a.issubset(u):\n",
        "\n",
        "        print()\n",
        "\n",
        "        print(\"A es subconjunto de U\")\n",
        "\n",
        "        d1 = u - a\n",
        "\n",
        "        r1 = d1.symmetric_difference(a)\n",
        "\n",
        "        print(f\"\\n1. (U - A) Δ A = {r1}\")\n",
        "\n",
        "        i1 = u.intersection(a)\n",
        "\n",
        "        r2 = i1 - a\n",
        "\n",
        "        print(f\"2. (U ∩ A) - A = {r2}\")\n",
        "\n",
        "        u1 = u.union(a)\n",
        "\n",
        "        r3 = u1.intersection(a)\n",
        "\n",
        "        print(f\"3. (U ∪ A) ∩ A = {r3}\")\n",
        "\n",
        "    # Juan: Si A no es subconjunto de U, se muestra mensaje de error\n",
        "\n",
        "    else:\n",
        "\n",
        "        print()\n",
        "\n",
        "        print(\"A no es subconjunto de U. No se pueden realizar las operaciones\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "\n",
        "    main()"
      ]
    }
  ]
}